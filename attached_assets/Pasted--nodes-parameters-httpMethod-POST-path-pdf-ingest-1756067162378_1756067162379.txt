{
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "pdf-ingest",
        "responseMode": "lastNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -192,
        -32
      ],
      "id": "399c691f-6d77-45ba-abc5-fc8796847693",
      "name": "Webhook (PDF Upload)",
      "webhookId": "7ad54353-8e73-402f-aba4-d2d0d8083294"
    },
    {
      "parameters": {
        "operation": "text",
        "binaryPropertyName": "data",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        64,
        -16
      ],
      "id": "494e19e4-8a77-45f0-aecc-2277f39515d5",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "functionCode": "// Paragraph-based chunking: join small paragraphs until chunk length threshold is reached.\n// this function reads text from items[0].json.text and tries to get filename from json.fileName or binary file metadata.\nconst text = items[0].json.text || items[0].json.plainText || '';\nlet filename = items[0].json.fileName || items[0].json.source || null;\nif (!filename && items[0].binary) {\n  const keys = Object.keys(items[0].binary);\n  if (keys.length) filename = items[0].binary[keys[0]].fileName || keys[0];\n}\nfilename = filename || 'uploaded.pdf';\n\nconst paragraphs = text.split(/\\n\\s*\\n+/).map(p => p.trim()).filter(Boolean);\nconst chunks = [];\nlet current = '';\nconst MAX_CHARS = 1200; // adjust for approx token size (empirical)\nfor (const p of paragraphs) {\n  if ((current + '\\n\\n' + p).length > MAX_CHARS) {\n    if (current) {\n      chunks.push(current.trim());\n      current = p;\n    } else {\n      // single paragraph > MAX_CHARS, push it as a chunk\n      chunks.push(p);\n      current = '';\n    }\n  } else {\n    current = current ? (current + '\\n\\n' + p) : p;\n  }\n}\nif (current) chunks.push(current.trim());\n\nreturn chunks.map((c, i) => ({ json: { chunk: c, chunkIndex: i, source: filename, createdAt: new Date().toISOString() } }));"
      },
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        304,
        -32
      ],
      "id": "07a1ba8f-2369-4155-a386-c8c56711d851",
      "name": "Paragraph Chunker"
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "text",
              "value": "={{ $json.chunk }}"
            },
            {
              "name": "source",
              "value": "={{ $json.source }}"
            },
            {
              "name": "chunkIndex",
              "value": "={{ $json.chunkIndex }}"
            },
            {
              "name": "createdAt",
              "value": "={{ $json.createdAt }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [
        544,
        -32
      ],
      "id": "766d1bf6-36c0-4807-940e-7090f39f4afb",
      "name": "Prepare for Embedding"
    },
    {
      "parameters": {
        "batchSize": 8,
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 1,
      "position": [
        768,
        -32
      ],
      "id": "a2e8b558-70ba-48ff-a1e7-07d63a0f8d75",
      "name": "SplitInBatches (rate control)"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        1040,
        -32
      ],
      "id": "59f423c0-4721-44fd-8ec7-eb9dfce902c6",
      "name": "Embeddings OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "qNeo4iE7bxaRRs5g",
          "name": "n8n free OpenAI API credits"
        }
      }
    },
    {
      "parameters": {
        "mode": "upsert",
        "pineconeIndex": {
          "__rl": true,
          "value": "index1",
          "mode": "list",
          "cachedResultName": "index1"
        },
        "namespace": "={{ $json.source || 'default' }}",
        "idField": "={{ $json.source + '_' + $json.chunkIndex }}",
        "metadataFields": [
          "source",
          "chunkIndex",
          "createdAt"
        ],
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
      "typeVersion": 1.3,
      "position": [
        1320,
        -32
      ],
      "id": "101ca56b-d3b9-4095-bc72-01b2863e7fc1",
      "name": "Pinecone Vector Store",
      "credentials": {
        "pineconeApi": {
          "id": "g8deX4j2MOCEJz8o",
          "name": "PineconeApi account 2"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1584,
        -32
      ],
      "id": "657ad31b-348c-4958-aeb6-b7c0e77be06f",
      "name": "Respond"
    }
  ],
  "connections": {
    "Webhook (PDF Upload)": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Paragraph Chunker",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Paragraph Chunker": {
      "main": [
        [
          {
            "node": "Prepare for Embedding",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare for Embedding": {
      "main": [
        [
          {
            "node": "SplitInBatches (rate control)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SplitInBatches (rate control)": {
      "main": [
        [
          {
            "node": "Embeddings OpenAI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "Pinecone Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Pinecone Vector Store": {
      "main": [
        [
          {
            "node": "Respond",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {}
}